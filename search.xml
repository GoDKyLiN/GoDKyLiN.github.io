<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo搭建个人博客使用教程</title>
    <url>/archives/48998.html</url>
    <content><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<span id="more"></span>

<h1 id="创建GitHub个人仓库："><a href="#创建GitHub个人仓库：" class="headerlink" title="创建GitHub个人仓库："></a>创建GitHub个人仓库：</h1><h2 id="1、注册GitHub："><a href="#1、注册GitHub：" class="headerlink" title="1、注册GitHub："></a>1、注册GitHub：</h2><p>进入<a href="https://github.com/">GitHub</a>官网,点击右上角的<strong>Sign UP</strong>,输入自己的邮箱进行注册。</p>
<h2 id="2、新建个人仓库"><a href="#2、新建个人仓库" class="headerlink" title="2、新建个人仓库"></a>2、新建个人仓库</h2><p>点击GitHub中的<strong>New repository</strong>创建一个新仓库。</p>
<p>仓库名应该为：<strong>你的GitHub用户名</strong>.github.io</p>
<h1 id="在本地搭建Hexo："><a href="#在本地搭建Hexo：" class="headerlink" title="在本地搭建Hexo："></a>在本地搭建Hexo：</h1><h2 id="1、安装Git："><a href="#1、安装Git：" class="headerlink" title="1、安装Git："></a>1、安装Git：</h2><p>Git 是一 款免费、开源的分布式版本控制系统，也是当今流行的版本控制系统之一，在众多的项目开发中普遍使用，得到程序员和工程师的欢迎和喜爱。</p>
<p>在Hexo博客搭建过程中，Git用于管理Hexo相关的本地文件，并将其上传部署到你的GitHub。</p>
<p>到<a href="https://git-scm.com/">Git官网</a>上下载最新版本的Git，在安装后，右键菜单栏中将会出现<strong>Git bash here</strong>的选项，并通过该选项来打开<strong>Git Bash</strong>这个命令行工具，后续的Git操作均通过此进行。</p>
<p>在安装后，为了确保安装成功，在命令行中输入<code>git --version</code>来查看Git的版本。</p>
<h2 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 Node.js 的使用包管理器 npm来管理所有模块的安装、配置、删除等操作。</p>
<p>在Hexo的搭建过程中，我们需要使用npm来进行相关模块的安装。</p>
<p>打开<a href="https://nodejs.org/zh-cn/">nodejs</a>的官网，选择任意一版本Node.js进行下载(Node.js 版本需不低于 10.13，Hexo官方建议使用 Node.js 12.0 及以上版本)</p>
<p>安装完成后，打开命令行，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>来检查Node.js是否安装成功，出现已下画面，则说明安装成功。</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109050015911.png" alt="version"></p>
<h2 id="3、安装Hexo"><a href="#3、安装Hexo" class="headerlink" title="3、安装Hexo"></a>3、安装Hexo</h2><p>在确认安装好Node.js与Git之后，我们可以开始安装Hexo。</p>
<p>新建一个文件夹（名字随意），然后打开这个文件夹，并在这个文件夹下右键打开<strong>Git bash</strong>。</p>
<p>输入npm 安装 Hexo。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>对于熟悉 npm 的进阶用户，可以仅局部安装 <code>hexo</code> 包。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo</span><br></pre></td></tr></table></figure>

<p>安装完成后使用<code>hexo -v</code>来查看Hexo的版本。</p>
<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo init //在当前文件夹中初始化Hexo</span><br><span class="line">$ npm install //在当前文件夹中进行安装</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<p>我们来简单的介绍一下这些文件的功能：</p>
<p>_config.yml：网站的 <a href="https://hexo.io/zh-cn/docs/configuration">配置</a> 信息，您可以在此配置大部分的参数。</p>
<p>package.json：Hexo所使用的应用程序的信息。<a href="https://ejs.co/">EJS</a>, <a href="http://learnboost.github.io/stylus/">Stylus</a> 和 <a href="http://daringfireball.net/projects/markdown/">Markdown</a> renderer 已默认安装。</p>
<p>scaffolds：<a href="https://hexo.io/zh-cn/docs/writing">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p>
<p>source：资源文件夹是存放用户资源的地方。</p>
<p>themes：<a href="https://hexo.io/zh-cn/docs/themes">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p>
<p>接下来我们来生成初始的博客页面：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>在服务器中输入<a href="http://localhost:4000/">http://localhost:4000/</a> 就可以看到你生成的博客了。</p>
<p>欣赏完你的博客后，可以使用<strong>ctrl + c</strong>关掉该服务。</p>
<h1 id="将Hexo部署到你的GitHub"><a href="#将Hexo部署到你的GitHub" class="headerlink" title="将Hexo部署到你的GitHub"></a>将Hexo部署到你的GitHub</h1><p>在Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你Github的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你GitHub的注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后生成.ssh密钥文件（无需输入，连按三个回车即可）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你GitHub的注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>在生成密钥文件后，打开你本地的C:\Users\Username\.ssh文件夹，找到生成的<code>id_rsa.pub</code>公钥，用记事本打开，将其内容全部复制。</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109050022772.png" alt="公钥"></p>
<p>回到GitHub，打开Setting页面，找到并进入<code>SSH and GPG keys</code>，点击<code>New SSH key</code> ，把你的<code>id_rsa.pub</code>里面的信息复制进去，最后点击<strong>Add SSH key</strong>。(Title随便取一个名字就行)</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109050022157.png" alt="ssh and gpg keys"></p>
<p>为了检测GitHub公钥是否连接成功，在本地的Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109050014855.png" alt="SSH成功"></p>
<p>出现以上内容，则说明设置成功，通过接下来的操作，可以将本地的Hexo部署到GitHub上。</p>
<p>打开站点配置文件<code>_config.yml</code>,拉到底部，修改以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/你Github的用户名/你Github的用户名.github.io.git </span><br><span class="line">  branch: main </span><br></pre></td></tr></table></figure>

<p>2020年10月后，GitHub将库的默认分支从master改为了main，因此，相较于以前的教程，这里的branch需填成<code> branch</code> 。</p>
<p>修改完成后，在Git Bash中输入：（让Hexo将你的blog部署在GitHub的仓库里）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>然后，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean  //清除已生成文件</span><br><span class="line">hexo g  //hexo generate 生成</span><br><span class="line">hexo d  //hexo deploy 部署</span><br></pre></td></tr></table></figure>

<p>完成后等待一段时间，打开浏览器，输入<code>https://你Github的用户名.github.io/ </code>,即可访问你的博客。</p>
<h1 id="将博客绑定个人域名"><a href="#将博客绑定个人域名" class="headerlink" title="将博客绑定个人域名"></a>将博客绑定个人域名</h1><p>你现在博客的地址为<code>你的GitHub用户名.github.io</code></p>
<p>由于域名过长，不方便记忆，不利于个人博客的推广，因此我们通常会选择设置一个更简短的个人域名。</p>
<h2 id="1、申请域名"><a href="#1、申请域名" class="headerlink" title="1、申请域名"></a>1、申请域名</h2><p>域名注册有多种方式，可以选择付费的域名，也可以选择免费的域名。</p>
<p>获取免费域名的攻略如下：</p>
<p>作者建议选择购买付费的域名，因为部分顶级域名仍然处于推广期，费用不算很高，一年就几十块的费用，但你完全的具有这个域名的使用权和拥有权，比较放心。</p>
<p>注册一个阿里云账户，可选用支付宝直接登录，进行实名认证后，在<a href="https://wanwang.aliyun.com/">万网</a>上进行域名的购买，作者购买的域名为<code>runlin.tech</code>,新注十年的价格仅为199，算下来年均20，我认为比较划算。</p>
<h2 id="2、Dns解析"><a href="#2、Dns解析" class="headerlink" title="2、Dns解析"></a>2、Dns解析</h2><p>在本地用win+R快捷键打开‘运行“窗口，输入cmd运行命令行控制台，打开后输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping yourname.github.io</span><br></pre></td></tr></table></figure>

<p>返回的值即为你托管在GitHub上的Blog的ip。</p>
<p>进入<a href="https://dns.console.aliyun.com/">域名解析列表</a>并对购买的域名进行解析。</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109041414984.png" alt="域名设置"></p>
<p>删除默认的解析并添加以下解析，如图：</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109041414741.png" alt="解析设置"></p>
<h2 id="3、GitHub设置"><a href="#3、GitHub设置" class="headerlink" title="3、GitHub设置"></a>3、GitHub设置</h2><p>登录GitHub，找到托管博客的仓库，在Settings中进入GitHub Pages，对域名进行设置：</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109050021822.png" alt="GitHubPages设置"></p>
<h2 id="4、GitHub-CNAME文件的设置"><a href="#4、GitHub-CNAME文件的设置" class="headerlink" title="4、GitHub CNAME文件的设置"></a>4、GitHub CNAME文件的设置</h2><p>在本地博客文件下找到source文件夹，新建一个名为<strong>CNAME</strong>的文件(#<strong>CNAME文件没有后缀</strong>)，内容为你购买的域名：</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109041427581.png" alt="CNAME文件"></p>
<p>然后去到你blog的根目录下，修改 _config.yml 文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">skip_render: CNAME</span><br></pre></td></tr></table></figure>

<p>最后在Git Bash中，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>到此，你的域名就与你的博客站点关联在一起了。</p>
<p>在绑定新域名后，你原来<code>yourname.github.io</code>的域名并未失效，只是会自动跳转到你的新域名。</p>
<h1 id="实现Hexo-Blog的多端同步"><a href="#实现Hexo-Blog的多端同步" class="headerlink" title="实现Hexo Blog的多端同步"></a>实现Hexo Blog的多端同步</h1><p>由于我更倾向于在笔记本上进行写作，而搭建博客的本地文件则保留在台式机上，为了方便记录灵感，我们可以利用Git管理代码，实现Hexo的多端同步。</p>
<p>我们在输入hexo d时，实则是将在本地编译生成，保存在<code>.deploy_git</code>中的源文件上传部署到GitHub中，而其它本地配置的文件，包括source和themes在内的所有文件都没有上传到GitHub中。</p>
<p>因此，我们可以通过将Hexo环境上传到GitHub仓库的方式，来实现多端同步，方法如下。</p>
<h2 id="1、新建仓库分支-Hexo"><a href="#1、新建仓库分支-Hexo" class="headerlink" title="1、新建仓库分支-Hexo"></a>1、新建仓库分支-Hexo</h2><p>在仓库中新建一个空的hexo分支，如图：</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109050013646.png" alt="创建hexo分支"><br>并在Settings中将hexo分支设为默认分支；</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109050013656.png" alt="设置hexo为默认分支"></p>
<h2 id="2、使用Git-clone拷贝仓库"><a href="#2、使用Git-clone拷贝仓库" class="headerlink" title="2、使用Git clone拷贝仓库"></a>2、使用Git clone拷贝仓库</h2><p>在本地的任意目录下，右键打开Git Bash，输入在code中找到的clone命令，</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109050016048.png" alt="git clone"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:GoDKyLiN/GoDKyLiN.github.io.git</span><br></pre></td></tr></table></figure>

<p>将其克隆到本地；</p>
<p>在克隆到本地的<code>GoDKyLiN.github.io</code>中，把除了.git文件夹以外的所有文件夹都删除，</p>
<p>并将本地的博客文件中，除了<code>.deploy_git</code>以外的所有源文件全部复制进去。</p>
<p>新建一个.gitignore文件（没有后缀！！！），忽略一些不需要上传的文件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;hexo&quot; //一个名为hexo的上传操作，方便回滚</span><br><span class="line">git push </span><br></pre></td></tr></table></figure>

<p>然后你就能在GitHub上看到你的配置文件了。</p>
<p><img src="https://raw.githubusercontent.com/GoDKyLiN/Runlin.image.host/main/img/202109050015688.png" alt="hexo 配置文件"></p>
<h2 id="3、在另一台设备上进行克隆"><a href="#3、在另一台设备上进行克隆" class="headerlink" title="3、在另一台设备上进行克隆"></a>3、在另一台设备上进行克隆</h2><p>按照上文在本地搭建Hexo的方式在另一台设备上搭建Hexo环境</p>
<p>在Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你Github的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你GitHub的注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>然后生成.ssh密钥文件（无需输入，连按三个回车即可）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你GitHub的注册邮箱&quot;</span><br></pre></td></tr></table></figure>

<p>回到GitHub，打开Setting页面，找到并进入SSH and GPG keys，点击New SSH key ，把你的id_rsa.pub里面的信息复制进去，最后点击Add SSH key。(Title随便取一个名字就行)</p>
<p>为了检测GitHub公钥是否连接成功，在本地的Git Bash中输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com #验证是否成功</span><br></pre></td></tr></table></figure>

<p>进入克隆到的文件夹：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>自此，你就可以在你的另一台设备上进行写作了，生成、部署：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>在完成一次更新后，记得进行一次上传操作，留下备份：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m &quot;hexo&quot; //一个名为hexo的上传操作，方便回滚</span><br><span class="line">git push </span><br></pre></td></tr></table></figure>

<p>可以使用<code>git pull</code>这个操作，直接和远端仓库进行同步。</p>
<p>自此，Hexo的多端同步已经完成。</p>
<h1 id="为Hexo更换主题"><a href="#为Hexo更换主题" class="headerlink" title="为Hexo更换主题"></a>为Hexo更换主题</h1>]]></content>
      <categories>
        <category>教程</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
